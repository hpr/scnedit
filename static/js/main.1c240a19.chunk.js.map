{"version":3,"sources":["App.js","index.js"],"names":["App","useState","bytes","setBytes","proposedCols","setProposedCols","cols","setCols","layers","setLayers","selectedLayer","setSelectedLayer","numLayers","setNumLayers","paintMode","setPaintMode","bucket","setBucket","filename","setFilename","showCellText","setShowCellText","getColor","autotileIdx","tilesetId","tileId","stringHash","toString","slice","getLayers","u8s","idx","dv","DataView","buffer","newLayers","Array","fill","map","_","size","getUint32","forEach","layer","layerEnd","layerId","layerZ","console","groupCollapsed","tiles","getInt16","numTiles","log","color","push","groupEnd","err","alert","cellStyle","height","width","rows","Math","ceil","length","className","type","accept","onChange","evt","reader","FileReader","file","target","files","onload","data","Uint8Array","result","name","readAsArrayBuffer","onClick","layerData","layerSizes","layerHdr","ArrayBuffer","setUint32","layerRLEs","reduce","acc","tile","lastAutotileIdx","lastTilesetId","lastTileId","layerRLEsDv","num","i","setInt16","layerSizesDv","sz","blob","Blob","saveAs","exportScn","htmlFor","value","e","Number","getAttribute","split","newSelectedLayer","newTiles","ri","ci","cell","style","background","formatCell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c240a19.chunk.js","sourcesContent":["import './App.css';\nimport stringHash from 'string-hash';\nimport {useState} from 'react';\nimport {saveAs} from 'file-saver';\n\nfunction App() {\n  const [bytes, setBytes] = useState([]);\n  const [proposedCols, setProposedCols] = useState(20);\n  const [cols, setCols] = useState(20);\n  const [layers, setLayers] = useState([]);\n  const [selectedLayer, setSelectedLayer] = useState(0);\n  const [numLayers, setNumLayers] = useState(1);\n  const [paintMode, setPaintMode] = useState(false);\n  const [bucket, setBucket] = useState(\"0,-1,-1\");\n  const [filename, setFilename] = useState(\"\");\n  const [showCellText, setShowCellText] = useState(false);\n\n  const getColor = (autotileIdx, tilesetId, tileId) => '#' + stringHash(`${autotileIdx},${tilesetId},${tileId}`).toString(16).slice(0, 4);\n\n  const getLayers = (u8s = bytes) => {\n    try {\n      let idx = 0;\n      const dv = new DataView(u8s.buffer);\n      const newLayers = Array(numLayers).fill().map(_ => {\n        const size = dv.getUint32(idx, false);\n        idx += 4;\n        return { size };\n      })\n      newLayers.forEach(layer => {\n        //const groups = (layer.size - 8) / 8;\n        const layerEnd = idx + layer.size;\n        layer.layerId = dv.getUint32(idx, false);\n        layer.layerZ = dv.getUint32(idx + 4, false);\n        idx += 8;\n        console.groupCollapsed(`layer ${layer.layerId} (sz ${layer.size}, z ${layer.layerZ}):`);\n        layer.tiles = [];\n        for (; idx < layerEnd; idx += 8) {\n          const autotileIdx = dv.getInt16(idx, false);\n          const tilesetId = dv.getInt16(idx + 2, false);\n          const tileId = dv.getInt16(idx + 4, false);\n          const numTiles = dv.getInt16(idx + 6, false);\n          console.log({ autotileIdx, tilesetId, tileId, numTiles });\n          const color = getColor(autotileIdx, tilesetId, tileId);\n          layer.tiles.push(...Array(numTiles).fill({ autotileIdx, tilesetId, tileId, color }))\n        }\n        console.groupEnd();\n      });\n      setLayers(newLayers);\n    } catch (err) {\n      alert(`${err} (try a different number of layers?)`);\n      console.groupEnd();\n    }\n  }\n\n  const exportScn = () => {\n    const layerData = [];\n    const layerSizes = [];\n    for (const layer of layers) {\n      const layerHdr = new DataView(new ArrayBuffer(8));\n      layerHdr.setUint32(0, layer.layerId, false);\n      layerHdr.setUint32(4, layer.layerZ, false);\n      const layerRLEs = layer.tiles.reduce((acc, tile) => {\n        const lastAutotileIdx = acc[acc.length - 4];\n        const lastTilesetId = acc[acc.length - 3];\n        const lastTileId = acc[acc.length - 2];\n        if (lastAutotileIdx === tile.autotileIdx && lastTilesetId === tile.tilesetId && lastTileId === tile.tileId) {\n          acc[acc.length - 1]++;\n        } else {\n          acc.push(tile.autotileIdx, tile.tilesetId, tile.tileId, 1);\n        }\n        return acc;\n      }, []);\n      const size = layerRLEs.length * 2 + 8;\n      const layerRLEsDv = new DataView(new ArrayBuffer(layerRLEs.length * 2));\n      layerRLEs.forEach((num, i) => layerRLEsDv.setInt16(i * 2, num, false));\n      layerData.push(layerHdr, layerRLEsDv);\n      layerSizes.push(size);\n    }\n    const layerSizesDv = new DataView(new ArrayBuffer(layerSizes.length * 4));\n    layerSizes.forEach((sz, i) => layerSizesDv.setUint32(i * 4, sz, false));\n    const blob = new Blob([ layerSizesDv, ...layerData ]);\n    saveAs(blob, filename);\n  }\n\n\n  const cellStyle = { height: showCellText ? 0 : '2em', width: showCellText ? 'auto' : '2em' };\n  const formatCell = (cell, ci, idx) => {\n    if (!cell) return <td style={cellStyle} key={ci}></td>\n    return <td key={ci} name={idx} style={{ ...cellStyle, background: cell.color }}>{ showCellText && `${cell.autotileIdx},${cell.tilesetId},${cell.tileId}` }</td>\n  }\n\n  const layer = layers[selectedLayer] || {};\n  const rows = layer.tiles ? Math.ceil(layer.tiles.length / cols) : 0;\n\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            <div>\n                <input type=\"file\" accept=\".scn\" onChange={(evt) => {\n                  const reader = new FileReader();\n                  const file = evt.target.files[0];\n                  reader.onload = () => {\n                    const data = new Uint8Array(reader.result);\n                    setBytes(data);\n                    setFilename(file.name);\n                    getLayers(data);\n                  }\n                  reader.readAsArrayBuffer(file);\n                }} />\n                <button onClick={() => exportScn()}>Export changes</button>\n            </div>\n            <div>\n                <label htmlFor=\"numLayers\">Number of layers: </label>\n                <input type=\"number\" name=\"numLayers\" value={numLayers} onChange={(e) => setNumLayers(Number(e.target.value))} />\n                <button onClick={() => getLayers()}>Re-calculate layers</button>\n            </div>\n            <div>\n                <label htmlFor=\"cols\">Columns: </label>\n                <input type=\"number\" name=\"cols\" value={proposedCols} onChange={(e) => setProposedCols(Number(e.target.value))} />\n                <button onClick={() => setCols(Number(proposedCols))}>Set columns</button>\n            </div>\n            <div>\n                <label htmlFor=\"layer\">Selected layer: </label>\n                <select name=\"layer\" value={selectedLayer} onChange={(e) => setSelectedLayer(Number(e.target.value))}>\n                    {layers.map((layer, i) => <option key={i} value={i}>{layer.layerId} (z = {layer.layerZ})</option>)}\n                </select>\n            </div>\n            <div>\n                <label htmlFor=\"showCellText\">Show cell text? </label>\n                <input type=\"checkbox\" name=\"showCellText\" value={showCellText} onChange={() => setShowCellText(!showCellText)}/>\n                <label htmlFor=\"paintMode\">Paint mode: </label>\n                <input type=\"checkbox\" name=\"paintMode\" value={paintMode} onChange={() => setPaintMode(!paintMode)}/>\n            </div>\n            <div><label htmlFor=\"bucket\">Paint with: </label><input type=\"text\" name=\"bucket\" value={bucket} onChange={(e) => setBucket(e.target.value)} /></div>\n            <table onClick={(evt) => {\n              const i = Number(evt.target.getAttribute('name'));\n              if (!paintMode) {\n                const tile = layers[selectedLayer].tiles[i];\n                setBucket(`${tile.autotileIdx},${tile.tilesetId},${tile.tileId}`);\n                return;\n              }\n              const [autotileIdx, tilesetId, tileId] = bucket.split(',');\n              const color = getColor(autotileIdx, tilesetId, tileId);\n              const newLayers = [...layers];\n              const newSelectedLayer = {...layers[selectedLayer]};\n              const newTiles = [...newSelectedLayer.tiles];\n              newLayers[selectedLayer] = newSelectedLayer;\n              newSelectedLayer.tiles = newTiles;\n              newTiles[i] = { autotileIdx, tilesetId, tileId, color };\n              setLayers(newLayers);\n            }}>\n                <tbody>\n                    {cols ? Array(rows).fill().map((_, ri) => <tr key={ri}>\n                        {Array(cols).fill().map((_, ci) => formatCell(layer.tiles[ri * cols + ci], ci, ri * cols + ci))}\n                    </tr>) : null}\n                </tbody>\n            </table>\n        </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}