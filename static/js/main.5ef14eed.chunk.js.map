{"version":3,"sources":["App.js","index.js"],"names":["App","useState","bytes","setBytes","proposedCols","setProposedCols","cols","setCols","layers","setLayers","selectedLayer","setSelectedLayer","numLayers","setNumLayers","getLayers","u8s","idx","dv","DataView","buffer","newLayers","Array","fill","map","_","size","getUint32","forEach","layer","layerEnd","layerId","layerZ","console","groupCollapsed","tiles","autotileIdx","getInt16","tilesetId","tileId","numTiles","log","color","stringHash","toString","slice","push","groupEnd","err","alert","rows","Math","ceil","length","className","type","accept","onChange","evt","reader","FileReader","file","target","files","onload","data","Uint8Array","result","readAsArrayBuffer","htmlFor","name","value","e","Number","onClick","i","ri","ci","cell","style","background","formatCell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ef14eed.chunk.js","sourcesContent":["import './App.css';\nimport stringHash from 'string-hash';\nimport {useState} from 'react';\n\nfunction App() {\n  const [bytes, setBytes] = useState([]);\n  const [proposedCols, setProposedCols] = useState(20);\n  const [cols, setCols] = useState(20);\n  const [layers, setLayers] = useState([]);\n  const [selectedLayer, setSelectedLayer] = useState(0);\n  const [numLayers, setNumLayers] = useState(1);\n\n  const getLayers = (u8s = bytes) => {\n    try {\n      let idx = 0;\n      const dv = new DataView(u8s.buffer);\n      const newLayers = Array(numLayers).fill().map(_ => {\n        const size = dv.getUint32(idx, false);\n        idx += 4;\n        return { size };\n      })\n      newLayers.forEach(layer => {\n        //const groups = (layer.size - 8) / 8;\n        const layerEnd = idx + layer.size;\n        layer.layerId = dv.getUint32(idx, false);\n        layer.layerZ = dv.getUint32(idx + 4, false);\n        idx += 8;\n        console.groupCollapsed(`layer ${layer.layerId} (sz ${layer.size}, z ${layer.layerZ}):`);\n        layer.tiles = [];\n        for (; idx < layerEnd; idx += 8) {\n          const autotileIdx = dv.getInt16(idx, false);\n          const tilesetId = dv.getInt16(idx + 2, false);\n          const tileId = dv.getInt16(idx + 4, false);\n          const numTiles = dv.getInt16(idx + 6, false);\n          console.log({ autotileIdx, tilesetId, tileId, numTiles });\n          const color = '#' + stringHash(`${autotileIdx},${tilesetId},${tileId}`).toString(16).slice(0, 4);\n          layer.tiles.push(...Array(numTiles).fill({ autotileIdx, tilesetId, tileId, color }))\n        }\n        console.groupEnd();\n      });\n      setLayers(newLayers);\n    } catch (err) {\n      alert(`${err} (try a different number of layers?)`);\n    }\n  }\n\n  const formatCell = (cell, ci) => {\n    if (!cell) return <td key={ci}></td>\n    return <td key={ci} style={{background: cell.color}}>{cell.autotileIdx},{cell.tilesetId},{cell.tileId}</td>\n  }\n\n  const layer = layers[selectedLayer] || {};\n  const rows = layer.tiles ? Math.ceil(layer.tiles.length / cols) : 0;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\".scn\" onChange={(evt) => {\n          const reader = new FileReader();\n          const file = evt.target.files[0];\n          reader.onload = () => {\n            const data = new Uint8Array(reader.result);\n            setBytes(data);\n            getLayers(data);\n          }\n          reader.readAsArrayBuffer(file);\n        }} />\n        <div><label htmlFor=\"numLayers\">Number of layers: </label></div>\n        <input type=\"number\" name=\"numLayers\" value={numLayers} onChange={(e) => setNumLayers(Number(e.target.value))} />\n        <button onClick={() => getLayers()}>Re-calculate layers</button>\n        <div><label htmlFor=\"cols\">Columns: </label></div>\n        <input type=\"number\" name=\"cols\" value={proposedCols} onChange={(e) => setProposedCols(Number(e.target.value))} />\n        <button onClick={() => setCols(Number(proposedCols))}>Set columns</button>\n        <div><label htmlFor=\"layer\">Selected Layer: </label></div>\n        <select name=\"layer\" value={selectedLayer} onChange={(e) => setSelectedLayer(Number(e.target.value))}>\n          {layers.map((layer, i) => <option key={i} value={i}>{layer.layerId} (z = {layer.layerZ})</option>)}\n        </select>\n        <table>\n          <tbody>\n            {cols ? Array(rows).fill().map((_, ri) => <tr key={ri}>\n              {Array(cols).fill().map((_, ci) => formatCell(layer.tiles[ri * cols + ci], ci))}\n            </tr>) : null}\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}