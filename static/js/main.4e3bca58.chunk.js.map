{"version":3,"sources":["App.js","index.js"],"names":["App","useState","setU8s","cols","setCols","layers","setLayers","selectedLayer","setSelectedLayer","layer","rows","totalTiles","Math","ceil","className","type","accept","onChange","evt","reader","FileReader","file","target","files","onload","bytes","Uint8Array","result","u8s","idx","newLayers","length","dv","DataView","buffer","slice","layerSize","getUint32","layerId","layerZ","layerEnd","console","groupCollapsed","tiles","autotileIdx","getInt16","tilesetId","tileId","numTiles","log","color","stringHash","toString","push","Array","fill","groupEnd","getLayers","readAsArrayBuffer","htmlFor","name","value","e","Number","map","i","_","ri","ci","cell","style","background","formatCell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e3bca58.chunk.js","sourcesContent":["import './App.css';\nimport stringHash from 'string-hash';\nimport {useState} from 'react';\n\nfunction App() {\n  const [u8s, setU8s] = useState([]);\n  const [cols, setCols] = useState(20);\n  const [layers, setLayers] = useState([]);\n  const [selectedLayer, setSelectedLayer] = useState(0);\n\n  const getLayers = (u8s) => {\n    let idx = 0;\n    let maxTiles = 0;\n    const newLayers = [];\n    while (idx < u8s.length - 12) {\n      const dv = new DataView(u8s.buffer.slice(idx, idx + 12));\n      const layerSize = dv.getUint32(0, false);\n      const layerId = dv.getUint32(4, false);\n      const layerZ = dv.getUint32(8, false);\n      const layerEnd = idx + layerSize + 4;\n      idx += 12;\n      console.groupCollapsed(`layer ${layerId} (sz ${layerSize}, z ${layerZ}):`);\n      const tiles = [];\n      let totalTiles = 0;\n      while (idx < layerEnd) {\n        const dv = new DataView(u8s.buffer.slice(idx, idx + 8));\n        const autotileIdx = dv.getInt16(0, false);\n        const tilesetId = dv.getInt16(2, false);\n        const tileId = dv.getInt16(4, false);\n        const numTiles = dv.getInt16(6, false);\n        totalTiles += numTiles;\n        console.log(autotileIdx, tilesetId, tileId, numTiles);\n        const color = '#' + stringHash(`${autotileIdx},${tilesetId},${tileId}`).toString(16).slice(0, 4);\n        tiles.push(...Array(numTiles).fill({ autotileIdx, tilesetId, tileId, color }))\n        idx += 8;\n      }\n      newLayers.push({layerId, layerZ, totalTiles, tiles});\n      console.log(\"i\", idx, \"/\", u8s.length);\n      console.groupEnd();\n      idx = layerEnd; //?\n    }\n    setLayers(newLayers);\n  }\n\n  const formatCell = (cell, ci) => {\n    if (!cell) return <td key={ci}></td>\n    return <td key={ci} style={{background: cell.color}}>{cell.autotileIdx},{cell.tilesetId},{cell.tileId}</td>\n  }\n\n  const layer = layers[selectedLayer] || {};\n  const rows = layer.totalTiles ? Math.ceil(layer.totalTiles / cols) : 0;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\".scn\" onChange={(evt) => {\n          const reader = new FileReader();\n          const file = evt.target.files[0];\n          reader.onload = () => {\n            const bytes = new Uint8Array(reader.result);\n            setU8s(bytes);\n            getLayers(bytes);\n          }\n          reader.readAsArrayBuffer(file);\n        }} />\n        <div><label htmlFor=\"cols\">Columns: </label></div>\n        <input type=\"number\" name=\"cols\" value={cols} onChange={(e) => setCols(Number(e.target.value))} />\n        <div><label htmlFor=\"layer\">Selected Layer: </label></div>\n        <select name=\"layer\" value={selectedLayer} onChange={(e) => setSelectedLayer(Number(e.target.value))}>\n          {layers.map((layer, i) => <option key={i} value={i}>{layer.layerId} (z = {layer.layerZ})</option>)}\n        </select>\n        <table>\n          <tbody>\n            {cols ? Array(rows).fill().map((_, ri) => <tr key={ri}>\n              {Array(cols).fill().map((_, ci) => formatCell(layer.tiles[ri * cols + ci], ci))}\n            </tr>) : null}\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}