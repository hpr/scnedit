{"version":3,"sources":["App.js","index.js"],"names":["App","useState","bytes","setBytes","proposedCols","setProposedCols","cols","setCols","layers","setLayers","selectedLayer","setSelectedLayer","numLayers","setNumLayers","paintMode","setPaintMode","bucket","setBucket","filename","setFilename","getColor","autotileIdx","tilesetId","tileId","stringHash","toString","slice","getLayers","u8s","idx","dv","DataView","buffer","newLayers","Array","fill","map","_","size","getUint32","forEach","layer","layerEnd","layerId","layerZ","console","groupCollapsed","tiles","getInt16","numTiles","log","color","push","groupEnd","err","alert","rows","Math","ceil","length","className","type","accept","onChange","evt","reader","FileReader","file","target","files","onload","data","Uint8Array","result","name","readAsArrayBuffer","onClick","layerData","layerSizes","layerHdr","ArrayBuffer","setUint32","layerRLEs","reduce","acc","tile","lastAutotileIdx","lastTilesetId","lastTileId","layerRLEsDv","num","i","setInt16","layerSizesDv","sz","blob","Blob","saveAs","exportScn","htmlFor","value","e","Number","getAttribute","split","newSelectedLayer","newTiles","ri","ci","cell","style","background","formatCell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.101b94a5.chunk.js","sourcesContent":["import './App.css';\nimport stringHash from 'string-hash';\nimport {useState} from 'react';\nimport {saveAs} from 'file-saver';\n\nfunction App() {\n  const [bytes, setBytes] = useState([]);\n  const [proposedCols, setProposedCols] = useState(20);\n  const [cols, setCols] = useState(20);\n  const [layers, setLayers] = useState([]);\n  const [selectedLayer, setSelectedLayer] = useState(0);\n  const [numLayers, setNumLayers] = useState(1);\n  const [paintMode, setPaintMode] = useState(false);\n  const [bucket, setBucket] = useState(\"0,-1,-1\");\n  const [filename, setFilename] = useState(\"\");\n\n  const getColor = (autotileIdx, tilesetId, tileId) => '#' + stringHash(`${autotileIdx},${tilesetId},${tileId}`).toString(16).slice(0, 4);\n\n  const getLayers = (u8s = bytes) => {\n    try {\n      let idx = 0;\n      const dv = new DataView(u8s.buffer);\n      const newLayers = Array(numLayers).fill().map(_ => {\n        const size = dv.getUint32(idx, false);\n        idx += 4;\n        return { size };\n      })\n      newLayers.forEach(layer => {\n        //const groups = (layer.size - 8) / 8;\n        const layerEnd = idx + layer.size;\n        layer.layerId = dv.getUint32(idx, false);\n        layer.layerZ = dv.getUint32(idx + 4, false);\n        idx += 8;\n        console.groupCollapsed(`layer ${layer.layerId} (sz ${layer.size}, z ${layer.layerZ}):`);\n        layer.tiles = [];\n        for (; idx < layerEnd; idx += 8) {\n          const autotileIdx = dv.getInt16(idx, false);\n          const tilesetId = dv.getInt16(idx + 2, false);\n          const tileId = dv.getInt16(idx + 4, false);\n          const numTiles = dv.getInt16(idx + 6, false);\n          console.log({ autotileIdx, tilesetId, tileId, numTiles });\n          const color = getColor(autotileIdx, tilesetId, tileId);\n          layer.tiles.push(...Array(numTiles).fill({ autotileIdx, tilesetId, tileId, color }))\n        }\n        console.groupEnd();\n      });\n      setLayers(newLayers);\n    } catch (err) {\n      alert(`${err} (try a different number of layers?)`);\n      console.groupEnd();\n    }\n  }\n\n  const exportScn = () => {\n    const layerData = [];\n    const layerSizes = [];\n    for (const layer of layers) {\n      const layerHdr = new DataView(new ArrayBuffer(8));\n      layerHdr.setUint32(0, layer.layerId, false);\n      layerHdr.setUint32(4, layer.layerZ, false);\n      const layerRLEs = layer.tiles.reduce((acc, tile) => {\n        const lastAutotileIdx = acc[acc.length - 4];\n        const lastTilesetId = acc[acc.length - 3];\n        const lastTileId = acc[acc.length - 2];\n        if (lastAutotileIdx === tile.autotileIdx && lastTilesetId === tile.tilesetId && lastTileId === tile.tileId) {\n          acc[acc.length - 1]++;\n        } else {\n          acc.push(tile.autotileIdx, tile.tilesetId, tile.tileId, 1);\n        }\n        return acc;\n      }, []);\n      const size = layerRLEs.length * 2 + 8;\n      const layerRLEsDv = new DataView(new ArrayBuffer(layerRLEs.length * 2));\n      layerRLEs.forEach((num, i) => layerRLEsDv.setInt16(i * 2, num, false));\n      layerData.push(layerHdr, layerRLEsDv);\n      layerSizes.push(size);\n    }\n    const layerSizesDv = new DataView(new ArrayBuffer(layerSizes.length * 4));\n    layerSizes.forEach((sz, i) => layerSizesDv.setUint32(i * 4, sz, false));\n    const blob = new Blob([ layerSizesDv, ...layerData ]);\n    saveAs(blob, filename);\n  }\n\n  const formatCell = (cell, ci, idx) => {\n    if (!cell) return <td key={ci}></td>\n    return <td key={ci} name={idx} style={{ background: cell.color }}>{cell.autotileIdx},{cell.tilesetId},{cell.tileId}</td>\n  }\n\n  const layer = layers[selectedLayer] || {};\n  const rows = layer.tiles ? Math.ceil(layer.tiles.length / cols) : 0;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <input type=\"file\" accept=\".scn\" onChange={(evt) => {\n            const reader = new FileReader();\n            const file = evt.target.files[0];\n            reader.onload = () => {\n              const data = new Uint8Array(reader.result);\n              setBytes(data);\n              setFilename(file.name);\n              getLayers(data);\n            }\n            reader.readAsArrayBuffer(file);\n          }} />\n          <button onClick={() => exportScn()}>Export changes</button>\n        </div>\n        <div>\n          <label htmlFor=\"numLayers\">Number of layers: </label>\n          <input type=\"number\" name=\"numLayers\" value={numLayers} onChange={(e) => setNumLayers(Number(e.target.value))} />\n          <button onClick={() => getLayers()}>Re-calculate layers</button>\n        </div>\n        <div>\n          <label htmlFor=\"cols\">Columns: </label>\n          <input type=\"number\" name=\"cols\" value={proposedCols} onChange={(e) => setProposedCols(Number(e.target.value))} />\n          <button onClick={() => setCols(Number(proposedCols))}>Set columns</button>\n        </div>\n        <div>\n          <label htmlFor=\"layer\">Selected layer: </label>\n          <select name=\"layer\" value={selectedLayer} onChange={(e) => setSelectedLayer(Number(e.target.value))}>\n            {layers.map((layer, i) => <option key={i} value={i}>{layer.layerId} (z = {layer.layerZ})</option>)}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"paintMode\">Paint mode: </label>\n          <input type=\"checkbox\" name=\"paintMode\" value={paintMode} onChange={() => setPaintMode(!paintMode)}/>\n        </div>\n        <div><label htmlFor=\"bucket\">Paint with: </label><input type=\"text\" name=\"bucket\" value={bucket} onChange={(e) => setBucket(e.target.value)} /></div>\n        <table onClick={(evt) => {\n          if (!paintMode) return;\n          const i = Number(evt.target.getAttribute('name'));\n          const [autotileIdx, tilesetId, tileId] = bucket.split(',');\n          const color = getColor(autotileIdx, tilesetId, tileId);\n          const newLayers = [...layers];\n          const newSelectedLayer = {...layers[selectedLayer]};\n          const newTiles = [...newSelectedLayer.tiles];\n          newLayers[selectedLayer] = newSelectedLayer;\n          newSelectedLayer.tiles = newTiles;\n          newTiles[i] = { autotileIdx, tilesetId, tileId, color };\n          setLayers(newLayers);\n        }}>\n          <tbody>\n            {cols ? Array(rows).fill().map((_, ri) => <tr key={ri}>\n              {Array(cols).fill().map((_, ci) => formatCell(layer.tiles[ri * cols + ci], ci, ri * cols + ci))}\n            </tr>) : null}\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}