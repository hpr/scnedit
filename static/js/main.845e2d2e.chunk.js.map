{"version":3,"sources":["App.js","index.js"],"names":["App","useState","setU8s","cols","setCols","layers","setLayers","numTiles","setNumTiles","selectedLayer","setSelectedLayer","rows","Math","floor","className","type","accept","onChange","evt","reader","FileReader","file","target","files","onload","bytes","Uint8Array","result","u8s","idx","maxTiles","newLayers","length","dv","DataView","buffer","slice","layerSize","getUint32","layerId","layerZ","layerEnd","console","group","tiles","totalTiles","autotileIdx","getInt16","tilesetId","tileId","log","color","stringHash","toString","push","Array","fill","groupEnd","getLayers","readAsArrayBuffer","htmlFor","name","value","e","Number","map","layer","i","_","ri","ci","cell","style","background","formatCell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.845e2d2e.chunk.js","sourcesContent":["import './App.css';\nimport stringHash from 'string-hash';\nimport {useState} from 'react';\n\nfunction App() {\n  const [u8s, setU8s] = useState([]);\n  const [cols, setCols] = useState(20);\n  const [layers, setLayers] = useState([]);\n  const [numTiles, setNumTiles] = useState(0);\n  const [selectedLayer, setSelectedLayer] = useState(0);\n\n  const getLayers = (u8s) => {\n    let idx = 0;\n    let maxTiles = 0;\n    const newLayers = [];\n    while (idx < u8s.length - 12) {\n      const dv = new DataView(u8s.buffer.slice(idx, idx + 12));\n      const layerSize = dv.getUint32(0, false);\n      const layerId = dv.getUint32(4, false);\n      const layerZ = dv.getUint32(8, false);\n      const layerEnd = idx + layerSize + 4;\n      idx += 12;\n      console.group(`layer ${layerId} (sz ${layerSize}, z ${layerZ}):`);\n      const tiles = [];\n      let totalTiles = 0;\n      while (idx < layerEnd) {\n        const dv = new DataView(u8s.buffer.slice(idx, idx + 8));\n        const autotileIdx = dv.getInt16(0, false);\n        const tilesetId = dv.getInt16(2, false);\n        const tileId = dv.getInt16(4, false);\n        const numTiles = dv.getInt16(6, false);\n        totalTiles += numTiles;\n        console.log(autotileIdx, tilesetId, tileId, numTiles);\n        const color = '#' + stringHash(`${autotileIdx},${tilesetId},${tileId}`).toString(16).slice(0, 4);\n        tiles.push(...Array(numTiles).fill({ autotileIdx, tilesetId, tileId, color }))\n        idx += 8;\n      }\n      newLayers.push({layerId, layerZ, tiles});\n      if (totalTiles > maxTiles) maxTiles = totalTiles;\n      console.groupEnd();\n      idx = layerEnd; //?\n      console.log(\"i\", idx, \"/\", u8s.length);\n    }\n    setLayers(newLayers);\n    setNumTiles(maxTiles);\n    console.log('layers', layers);\n    console.log(maxTiles);\n  }\n\n  const formatCell = (cell, ci) => {\n    if (!cell) return <td key={ci}></td>\n    return <td key={ci} style={{background: cell.color}}>{cell.autotileIdx},{cell.tilesetId},{cell.tileId}</td>\n  }\n\n  const rows = Math.floor(numTiles / cols);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\".scn\" onChange={(evt) => {\n          const reader = new FileReader();\n          const file = evt.target.files[0];\n          reader.onload = () => {\n            const bytes = new Uint8Array(reader.result);\n            setU8s(bytes);\n            getLayers(bytes);\n          }\n          reader.readAsArrayBuffer(file);\n        }} />\n        <div><label htmlFor=\"cols\">Columns: </label></div>\n        <input type=\"number\" name=\"cols\" value={cols} onChange={(e) => setCols(Number(e.target.value))} />\n        <div><label htmlFor=\"layer\">Selected Layer: </label></div>\n        <select name=\"layer\" value={selectedLayer} onChange={(e) => setSelectedLayer(Number(e.target.value))}>\n          {layers.map((layer, i) => <option key={i} value={i}>{layer.layerId} (z = {layer.layerZ})</option>)}\n        </select>\n        <table>\n          <tbody>\n            {cols && Array(rows).fill().map((_, ri) => <tr key={ri}>\n              {Array(cols).fill().map((_, ci) => formatCell(layers[selectedLayer].tiles[ri * cols + ci], ci))}\n            </tr>)}\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}